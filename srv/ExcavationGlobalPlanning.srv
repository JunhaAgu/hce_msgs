# request, ros Time server 를 통일해야함.
# Note : Timeout을 2초 가량으로 잡자.
Header header # 언제 기준으로 플래닝을 시작 할 지. (움직이기 시작하는 ROSTIME) header.stamp
# Global path 를 계산하는 time을 고려해서 적당히 미래에 (약 2초 뒤?)
#excavator_msgs/ExcavatorConfigurationL initial_configuration # L 좌표계
geometry_msgs/PointStamped dump_position # 어느 좌표계를 기준으로 했는지 적어야함. header.frame_id 에 적어라.
float32 dump_height # 덤프 포지션에서 수직방향으로 몇 미터 위에서 작업할건지 ? 덤프트럭을 치지 않기 위함.
geometry_msgs/Point[] current_ground # 현재 지형형상 (2-D level map, from reconstructor) (0,0) 이 꼭 있어야 함. x 범위는 무조건 0~15 m 사이의 데이터가 다 있어야 함. 만약, 먼 데이터가 없으면 마지막으로 젤일 먼 데이터로 쭉 밀기 (수평이다)
# 노드가 10 미만이었다. 그냥 1-D 궤적. (x,z) 의 벡터. x 기준으로 소팅되어있으면 좋다. 기준좌표계는 베이스 바닥.
geometry_msgs/Point[] target_ground  # 목표 지형형상 (2-D level map, from HCE) (0,0)이 꼭 있어야 함. 노드 갯수는 달라도 상관 ㄴ. 적어도 됨. 현재 형상의 x 좌표랑 달라도 됨. 그냥 1-D 궤적. 그냥 1-D 궤적. (x,z) 의 벡터. x 기준으로 소팅되어있으면 좋다. 기준좌표계는 베이스 바닥.
float32 tolerance # 목표지형형상까지 얼마나 접근해야하는지 (이건 걍 하드코딩할듯???)
#vision_msgs/BoundingBox3DArray obstacles # 장애물 위치 리스트 (사람,덤프트럭의 3-D 바운딩박스) 바운딩박스가 어느 좌표계

---
# Response
Header header # stamp 에 pose 가 시작하는 시점을 넣어서 줄 것 (Inkyu)
bool success # 성공 ? 실패 ? true: 성공
#excavator_msgs/ExcavatorConfigurationLStamped[] poses # to GCS (의사결정할때 쓰라고. 로깅도 하시고!)
std_msgs/Time[] phase_start_times # phase 별 시작 time을 보내준다 ? ex) phase_start_times[0] : 0번 phase start time. ...일단은 5개인데 갯수는 바뀔 수 있음.
# Note : phase_start_times와 poses (stamp)가 있으면, 지금이 몇번째 phase인지 알 수 있음. 이를 참고해서 GCS 에서 의사결정을 하면 됨. (당장은 특별한 작업이 필요없음)